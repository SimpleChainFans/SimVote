package ethereum

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/sirupsen/logrus"
	"gitlab.dataqin.com/sipc/vote_app/ethereum/foundation"
	"math/big"
	"strings"
	"testing"
)

/**
 * @Classname foundation
 * @Author Johnathan
 * @Date 2020/8/19 14:40
 * @Created by Goalnd 2020
 */

type VoteInfo struct {
	Name  string   `json:"name"`
	Info  string   `json:"info"`
	Begin *big.Int `json:"begin"`
	End   *big.Int `json:"end"`
}

const privateKey = "1d279d0f8fd2dd991b2ab74708d139a1fcfccf712b5b43af44c3d2eef0e37179"
const address = "0xe8c8a5373d3541c27f3a369c5e860d18f5b256c6"

//const privateKey = "f4fb142a51dd7edda51003b6b5e1943bcc9b3641c5610001bb75fb0add558469"
//const address = "0xb9df4b612ccf188907d11b7fb7d24eb1f0bc14a8"
const SubprivateKey = "ad9ea04f3d01c0758240f35280b35c84886adca94435cd385d179047ef11784e"
const SubAddress = "0xfc53af2db0712e02663ed7530de1f52e45c34df3"
const FoundationContract = "0x32bF6faB840AEBaBE6c3293694d9952c7abfa1Fa"
const Focus = "0xec44cfa70aedf56a9b65e4f7d092567671d3b618"

func TestEthRpcClient_DeployoundationContract(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	client := ethClient.GetClient()
	name := "选择一理事会？"
	info := `选择一个`
	begin := big.NewInt(1598248862)
	end := big.NewInt(1598716800)
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	data := struct {
		Name  string `json:"name"`
		Begin int    `json:"begin"`
		End   int    `json:"end"`
		Info  string `json:"info"`
		To    string `json:"to"`
	}{
		name,
		int(begin.Int64()),
		int(end.Int64()),
		info,
		Focus,
	}
	bytes, err := json.Marshal(data)
	if err != nil {
		t.Error(err.Error())
		return
	}
	to := common.BytesToAddress([]byte(nil))
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: big.NewInt(0), Gas: 1000000, From: common.HexToAddress(address), To: &to, Data: bytes}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit = 8000000
	auth, err := ethClient.TransactOpts(privateKey, client, gasLimit, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	peoples := []string{"张学政", "韩梦", "曹可磊", "闫琳琳", "谢磊", "刘哲", "高旭", "朱卿赫", "向文祥"}
	addr, tx, _, err := foundation.DeployFoundation(auth, client, name, begin, end, info, common.HexToAddress(Focus), big.NewInt(1000000000000000000),
		big.NewInt(1), big.NewInt(10), peoples, "test")
	if err != nil {
		t.Error(err.Error())
		return
	}
	t.Log(addr.Hex())
	t.Log(tx.Hash().Hex())
}

// 部署投票合约
func TestEthRpcClient_DeployStoreFoundationContract(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.148:9545")
	name := "选择一理事会？"
	info := `选择一个`
	begin := big.NewInt(1599805642)
	end := big.NewInt(1599905642)
	fare := big.NewInt(1e18)
	min := big.NewInt(1)
	max := big.NewInt(5)
	//peoples := []string{"张学政", "韩梦", "曹可磊", "闫琳琳", "谢磊", "刘哲", "高旭", "朱卿赫", "向文祥"}
	peoples := []string{"ff", "gg"}
	private, _ := crypto.HexToECDSA(privateKey)

	client := ethClient.GetClient()
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	parsed, err := abi.JSON(strings.NewReader(foundation.FoundationABI))
	if err != nil {
		t.Error(err.Error())
		return
	}
	input, err := parsed.Pack("", name, begin, end, info, common.HexToAddress(Focus), fare, min, max, peoples, "理事会投票")
	if err != nil {
		t.Error(err.Error())
		return
	}
	input = append(common.FromHex(foundation.FoundationBin), input...)
	str := ``
	input, _ = hex.DecodeString(str)
	//t.Log(hex.EncodeToString(input))
	toAddr := common.BytesToAddress([]byte(nil))
	value := big.NewInt(0)
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: value, Gas: gasPrice.Uint64(), From: common.HexToAddress(address), To: &toAddr, Data: input}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}

	res := hex.EncodeToString(input)
	gasLimit = 8000000
	t.Log(res)
	nonce, err := client.NonceAt(context.Background(), common.HexToAddress(address), nil)
	t.Log(nonce)
	if err != nil {
		t.Fatal(err)
	}
	tx := types.NewContractCreation(
		nonce, value,
		gasLimit, gasPrice, input,
	)
	t.Log(tx.Hash().Hex())
	signedTx, err := types.SignTx(tx, types.HomesteadSigner{}, private)
	if err != nil {
		t.Fatal(err)
	}

	bf, err := rlp.EncodeToBytes(signedTx)
	if err != nil {
		t.Fatal(err)
	}
	rawTx := hexutil.Encode(bf)
	t.Log(bf) // 签名结果

	// 跨链交易转发
	txHash, err := ethClient.SendRawTransaction(rawTx)
	//err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		t.Fatal(err)
	}
	contract := crypto.CreateAddress(common.HexToAddress(address), signedTx.Nonce())
	t.Log(txHash, "-----", contract.Hex())
	/*0x06233629550929c77726759c4fe077e48b208137fb01ce692ce68336a801aaad ----- 0x5CD70f90fB5DB2546CCd4DA5C2396c9460178e29*/
}

//添加候选人(没有投票限制使用AddNormalNominees)
func TestEthRpcClient_AddNormalNominees(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	private, _ := crypto.HexToECDSA(privateKey)
	client := ethClient.GetClient()
	parsed, err := abi.JSON(strings.NewReader(foundation.FoundationABI))
	if err != nil {
		t.Error(err.Error())
		return
	}
	addrList := []common.Address{
		common.HexToAddress("0x95bebb32e53a954464dfd8fb45da3ed1ac645d08"),
		common.HexToAddress("0xb9df4b612ccf188907d11b7fb7d24eb1f0bc14a8"),
	}
	//focus := common.HexToAddress(Focus)
	input, err := parsed.Pack("AddNormalNominees", addrList, "理事会投票")
	if err != nil {
		t.Error(err.Error())
		return
	}
	res := hex.EncodeToString(input)
	t.Log(res)
	nonce, err := client.NonceAt(context.Background(), common.HexToAddress(address), nil)
	t.Log(nonce)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	//合约地址(投票部署的合约地址)
	toAddr := common.HexToAddress(FoundationContract)

	value := big.NewInt(0)
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: value, From: common.HexToAddress(address), To: &toAddr, Data: input}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//gasLimit = 300000
	tx := types.NewTransaction(
		nonce, toAddr, value,
		gasLimit, gasPrice, input,
	)
	t.Log(tx.Hash().Hex())
	signedTx, err := types.SignTx(tx, types.HomesteadSigner{}, private)
	if err != nil {
		t.Fatal(err)
	}

	bf, err := rlp.EncodeToBytes(signedTx)
	if err != nil {
		t.Fatal(err)
	}
	rawTx := hexutil.Encode(bf)
	t.Log(bf) // 签名结果

	// 交易转发
	txHash, err := ethClient.SendRawTransaction(rawTx)
	//err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

/*func TestSetTicket(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	client := ethClient.GetClient()
	foundationInstance, err := foundation.NewFoundation(common.HexToAddress(FoundationContract), client)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit := uint64(300000)
	auth, err := ethClient.TransactOpts(privateKey, client, gasLimit, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	fare := big.NewInt(1)
	min := big.NewInt(1)
	max := big.NewInt(10)
	//focus := common.HexToAddress(Focus)
	tx, err := foundationInstance.SetTicket(auth, fare, min, max)
	if err != nil {
		t.Error(err.Error())
		return
	}
	t.Log(tx.Hash().Hex())
}*/

// 设置规则
func TestEthRpcClient_SetTicket(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	private, _ := crypto.HexToECDSA(privateKey)
	client := ethClient.GetClient()
	parsed, err := abi.JSON(strings.NewReader(foundation.FoundationABI))
	if err != nil {
		t.Error(err.Error())
		return
	}
	fare := big.NewInt(1e18)
	min := big.NewInt(1)
	max := big.NewInt(10)
	focus := common.HexToAddress(Focus)
	input, err := parsed.Pack("SetTicket", fare, min, max, focus)
	if err != nil {
		t.Error(err.Error())
		return
	}
	res := hex.EncodeToString(input)
	t.Log(res)
	nonce, err := client.NonceAt(context.Background(), common.HexToAddress(address), nil)
	t.Log(nonce)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	//合约地址(投票部署的合约地址)
	toAddr := common.HexToAddress(FoundationContract)

	value := big.NewInt(0)
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: value, From: common.HexToAddress(address), To: &toAddr, Data: input}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//gasLimit = 300000
	tx := types.NewTransaction(
		nonce, toAddr, value,
		gasLimit, gasPrice, input,
	)
	t.Log(tx.Hash().Hex())
	signedTx, err := types.SignTx(tx, types.HomesteadSigner{}, private)
	if err != nil {
		t.Fatal(err)
	}

	bf, err := rlp.EncodeToBytes(signedTx)
	if err != nil {
		t.Fatal(err)
	}
	rawTx := hexutil.Encode(bf)
	t.Log(bf) // 签名结果

	// 交易转发
	txHash, err := ethClient.SendRawTransaction(rawTx)
	//err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestStartVoteFoundation(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	client := ethClient.GetClient()
	foundationInstance, err := foundation.NewFoundation(common.HexToAddress(FoundationContract), client)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit := uint64(300000)
	auth, err := ethClient.TransactOpts(SubprivateKey, client, gasLimit, big.NewInt(1e18))
	if err != nil {
		t.Error(err.Error())
		return
	}
	tx, err := foundationInstance.StartVote(auth, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	t.Log(tx.Hash().Hex())
}

//理事会投票
func TestStartFoundationVote(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.148:9545")
	private, _ := crypto.HexToECDSA(SubprivateKey)
	client := ethClient.GetClient()
	parsed, err := abi.JSON(strings.NewReader(foundation.FoundationABI))
	if err != nil {
		t.Error(err.Error())
		return
	}
	//合约地址(投票部署的合约地址)
	toAddr := common.HexToAddress(FoundationContract)
	nonce, err := client.NonceAt(context.Background(), common.HexToAddress(SubAddress), nil)
	t.Log(nonce)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	num := big.NewInt(0) //候选人序号
	input, err := parsed.Pack("StartVote", num)
	if err != nil {
		t.Error(err.Error())
		return
	}
	res := hex.EncodeToString(input)
	t.Log(res)
	str := `33c2d6280000000000000000000000000000000000000000000000000000000000000000`
	input, _ = hex.DecodeString(str)
	value := big.NewInt(2e18)
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: value, From: common.HexToAddress(SubAddress), To: &toAddr, Data: input}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//gasLimit = uint64(300000)
	tx := types.NewTransaction(
		nonce, toAddr, value,
		gasLimit, gasPrice, input,
	)
	t.Log(tx.Hash().Hex())
	signedTx, err := types.SignTx(tx, types.HomesteadSigner{}, private)
	if err != nil {
		t.Fatal(err)
	}

	bf, err := rlp.EncodeToBytes(signedTx)
	if err != nil {
		t.Fatal(err)
	}
	rawTx := hexutil.Encode(bf)
	t.Log(bf) // 签名结果

	// 交易转发
	txHash, err := ethClient.SendRawTransaction(rawTx)
	//err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

// 获取投票信息
func TestGetNominessInfo(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.148:9545")
	client := ethClient.GetClient()
	foundationInstance, err := foundation.NewFoundation(common.HexToAddress(FoundationContract), client)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//opts := bind.CallOpts{Pending: true, From: common.HexToAddress(SubAddress), BlockNumber: nil, Context: context.Background()}
	res, err := foundationInstance.GetNomineeInfo(nil, "奥巴马")
	t.Log("Num", res.Num)
	t.Log("Source", res.Source)
	t.Log("Vote", res.Vote)
}
func TestGetNominess(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.148:9545")
	client := ethClient.GetClient()
	foundationInstance, err := foundation.NewFoundation(common.HexToAddress(FoundationContract), client)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//opts := bind.CallOpts{Pending: true, From: common.HexToAddress(SubAddress), BlockNumber: nil, Context: context.Background()}
	res, err := foundationInstance.Nominees(nil, big.NewInt(0))
	t.Log("Name", res.Name)
	t.Log("Source", res.Source)
	t.Log("Vote", res.Vote)
}

func TestGetVote(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	//client := ethClient.GetClient()
	foundationInstance, err := ethClient.Foundation(FoundationContract)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//opts := bind.CallOpts{Pending: true, From: common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"), BlockNumber: nil, Context: context.Background()}
	res, err := foundationInstance.GetVote(nil, "", common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"))
	t.Log("num", res)
}

//划转到基金会
func TestFlowToFoundation(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	client := ethClient.GetClient()
	foundationInstance, err := ethClient.Foundation(FoundationContract)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit := uint64(300000)
	auth, err := ethClient.TransactOpts(privateKey, client, gasLimit, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	//opts := bind.CallOpts{Pending: true, From: common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"), BlockNumber: nil, Context: context.Background()}
	res, err := foundationInstance.TransferToFoundation(auth, common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"))
	t.Log(res.Hash().Hex())
}

func TestFlowFoundation(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.4.121:8555")
	private, _ := crypto.HexToECDSA(privateKey)

	client := ethClient.GetClient()
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		t.Error(err.Error())
		return
	}
	parsed, err := abi.JSON(strings.NewReader(foundation.FoundationABI))
	if err != nil {
		t.Error(err.Error())
		return
	}
	input, err := parsed.Pack("transferToFoundation", common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"))
	if err != nil {
		t.Error(err.Error())
		return
	}
	str := `6dc78b74000000000000000000000000fc53af2db0712e02663ed7530de1f52e45c34df3`
	input, _ = hex.DecodeString(str)
	//t.Log(hex.EncodeToString(input))
	res := hex.EncodeToString(input)
	t.Log(res)
	nonce, err := client.NonceAt(context.Background(), common.HexToAddress(address), nil)
	t.Log(nonce)
	if err != nil {
		t.Fatal(err)
	}
	//合约地址(投票部署的合约地址)
	toAddr := common.HexToAddress(FoundationContract)

	value := big.NewInt(0)
	msg := ethereum.CallMsg{GasPrice: gasPrice, Value: value, From: common.HexToAddress(address), To: &toAddr, Data: input}
	gasLimit, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		t.Error(err.Error())
		return
	}
	//gasLimit = 300000
	tx := types.NewTransaction(
		nonce, toAddr, value,
		gasLimit, gasPrice, input,
	)
	t.Log(tx.Hash().Hex())
	signedTx, err := types.SignTx(tx, types.HomesteadSigner{}, private)
	if err != nil {
		t.Fatal(err)
	}

	bf, err := rlp.EncodeToBytes(signedTx)
	if err != nil {
		t.Fatal(err)
	}
	rawTx := hexutil.Encode(bf)
	t.Log(bf) // 签名结果

	// 交易转发
	txHash, err := ethClient.SendRawTransaction(rawTx)
	//err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestBack(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.146:8545")
	client := ethClient.GetClient()
	foundationInstance, err := ethClient.Foundation(FoundationContract)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit := uint64(300000)
	auth, err := ethClient.TransactOpts(privateKey, client, gasLimit, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	//opts := bind.CallOpts{Pending: true, From: common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"), BlockNumber: nil, Context: context.Background()}
	res, err := foundationInstance.SafeWithdrawal(auth, common.HexToAddress("0xfc53af2db0712e02663ed7530de1f52e45c34df3"), big.NewInt(3))
	t.Log(res.Hash().Hex())
}

func TestEthRpcClient_FinishVote(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.146:8545")
	client := ethClient.GetClient()
	foundationInstance, err := ethClient.Foundation(FoundationContract)
	if err != nil {
		t.Error(err.Error())
		return
	}
	gasLimit := uint64(300000)
	auth, err := ethClient.TransactOpts("25926cd431628bb7ba2bc0a397a9a66af802da80f83a8d1654c7d2a335dba863", client, gasLimit, big.NewInt(0))
	if err != nil {
		t.Error(err.Error())
		return
	}
	res, err := foundationInstance.FinishVote(auth)
	t.Log(res.Hash().Hex())
}

func TestEthRpcClient_FinishStatus(t *testing.T) {
	ethClient := NewEthRpcClient("http://192.168.3.148:9545")
	foundationInstance, err := ethClient.Foundation(FoundationContract)
	if err != nil {
		t.Error(err.Error())
		return
	}
	res, err := foundationInstance.Finished(nil)
	if err != nil {
		logrus.Error(err.Error())
		return
	}
	t.Log(res)
}
